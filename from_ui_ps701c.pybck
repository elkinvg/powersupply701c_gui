def checkCfgFile(self):
#isCorrect = True
if os.path.exists(fileCfg):
    try:
        file = open(fileCfg,"r")
        lines = file.readlines()
        file.close()
        print "Lines: " + str(len(lines)) # ??? debug
        if len(lines) > 0:
            for line in lines:
                lineDevName = line # ??? debug if lenth >1
                splitLine = lineDevName.split("=")
                if len(splitLine) >3: # ???
                    #isCorrect = False
                    continue
                    #self.printMessageToOutputEdit("Incorrect format of configfile")

                else:
                    if (splitLine[0]=="[sock]"):
                        self.devices.append(splitLine[1])
                        # print "dev_: "


            #if(isCorrect==False):
            if(len(self.devices)==0):
                self.showDialog()
                return

            print self.devices[0]
            #self.initDevices()
                    #self.runDevice()
        else:
            self.showDialog()

    except IOError as e:
        self.printMessageToOutputEdit(str(e))
else:
    self.showDialog()

def checkStatus(self, devName):
    try:
        device = PyTango.DeviceProxy(str(devName)) # ??????? Debug. Get name of proxy from settings
        # device = PyTango.DeviceProxy("sock/pssocketaa/1")

        # self.devicesState[0] = device.state()
        mes2 = device.status()
        #print "State: " + mes
        print "Status: " + mes2
        self.tangoDevices.append(device)
    except PyTango.DevFailed as exc:
        self.printMessageToOutputEdit(str(exc))

def forMoreThan10Devices(self):
    return


# devices= list()
#
# def checkCfgFile():
#         #isCorrect = True
#         if os.path.exists(fileCfg):
#             try:
#                 file = open(fileCfg,"r")
#                 lines = file.readlines()
#                 file.close()
#                 print "Lines: " + str(len(lines)) # ??? debug
#                 if len(lines) > 0:
#                     for line in lines:
#                         lineDevName = line # ??? debug if lenth >1
#                         splitLine = lineDevName.split("=")
#                         if len(splitLine) >3: # ???
#                             #isCorrect = False
#                             continue
#                             #self.printMessageToOutputEdit("Incorrect format of configfile")
#
#                         else:
#                             if (splitLine[0]=="[sock]"):
#                                 devices.append(splitLine[1])
#
#             except IOError as e:
#                 #printMessageToOutputEdit(str(e))
#                 print("IOERROR")
#         # else:
#         #     showDialog()
#
# def addDeviceToCfgFile(devName): # ??? for many devices
#     with open(fileCfg,"w") as fileWrite:
#             fileWrite.write(str("[sock]=" +devName+"="))





def addDeviceToCfgFile(self,devName): # ??? for many devices
    with open(fileCfg,"w") as fileWrite:
            fileWrite.write(str("[sock]=" +devName+"="))



if __name__ == "__main__":
    import sys
    app = QtGui.QApplication(sys.argv)
    MainWindow = QtGui.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

    # def initDevices(self):
    #     if len(self.devices) < 1:
    #         print("Devices less than 1")
    #         return
    #     print "Number of devices: " + str(len(self.devices))
    #
    #     for i in range(0,len(self.devices)):
    #         try:
    #             print("Device: -> " + self.devices[i])
    #             deviceTan = PyTango.DeviceProxy(self.devices[i])
    #             if deviceTan.state() == PyTango.DevState.OFF:
    #                 # self.statusLed[i].setLedColor("white")
    #                 self.voltageValueSpinBox[i].setEnabled(False)
    #                 self.setVoltageButton[i].setEnabled(False)
    #                 self.statusLed[i].setToolTip("TESTOFF") # ??? test
    #                 print("TESTOFF")
    #             elif deviceTan.state() == PyTango.DevState.FAULT:
    #                 # self.statusLed[i].setLedColor("red")
    #                 self.voltageValueSpinBox[i].setEnabled(False)
    #                 self.setVoltageButton[i].setEnabled(False)
    #                 self.statusLed[i].setToolTip("TESTFAULT") # ??? test
    #                 print self.statusLed[i].getFormatedToolTip(True)
    #                 print("TESTFAULT")
    #             elif deviceTan.state() == PyTango.DevState.ON:
    #                 # self.statusLed[i].setLedColor("green")
    #                 self.voltageValueSpinBox[i].setEnabled(True)
    #                 self.setVoltageButton[i].setEnabled(True)
    #                 self.statusLed[i].setToolTip("TESTON") # ??? test
    #                 print("TESTON")
    #             self.tangoDevices.append(deviceTan)
    #         except PyTango.DevFailed as exc:
    #             self.statusLed[i].setLedColor("red")
    #             self.statusLed[i].setToolTip(str(exc)) # ??? test
    #             self.voltageValueSpinBox[i].setEnabled(False)
    #             self.setVoltageButton[i].setEnabled(False)


def runDevice(self):
    print "Number of active devices: " + str(len(self.devices))
    self.checkStatus(self.devices[0])


def printMessageToOutputEdit(self, message):
    dateTime = datetime.strftime(datetime.now(), '%Y-%m-%d %H:%M:%S')
    self.outputEdit.append("<b>" + dateTime + "</b>")
    excMes = "Exception message: " + message
    self.outputEdit.append(excMes)

# def showDialog(self):
    # #def showDialog(self,MainWindow):
    #     dial = SettingsDialog(self)
    #     if (len(self.devices)!=0):
    #         dial.setDefaultValue(self.devices[0])
    #     dial.show()
    #
    #     if dial.exec_():
    #         text = dial.getValue()
    #         self.devices.append(str(text))
    #         # MainWindow.setWindowTitle(_translate(text, text, None))
    #         self.addDeviceToCfgFile(text)